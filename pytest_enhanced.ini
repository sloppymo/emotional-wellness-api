[pytest]
# Enhanced test file patterns for comprehensive discovery
python_files = test_*.py *_test.py test*.py
python_classes = Test* *Test *Tests
python_functions = test_* *_test

# Enhanced test markers for better organization
markers =
    # Component markers
    moss: marks tests for MOSS crisis detection system
    veluria: marks tests for VELURIA intervention protocols
    canopy: marks tests for CANOPY symbolic processing
    root: marks tests for ROOT longitudinal analysis
    integration: marks tests for SYLVA-WREN integration
    
    # Functionality markers
    crisis: marks tests for crisis intervention functionality
    protocol: marks tests for protocol execution
    escalation: marks tests for escalation handling
    security: marks tests for security and PHI protection
    audit: marks tests for audit logging and compliance
    
    # Performance markers
    slow: marks tests that take longer to run (>5s)
    fast: marks tests that run quickly (<1s)
    performance: marks performance benchmarking tests
    load: marks load testing scenarios
    
    # Environment markers
    unit: marks pure unit tests (no external dependencies)
    integration: marks integration tests (with external systems)
    e2e: marks end-to-end tests (full workflow)
    smoke: marks smoke tests for basic functionality
    
    # Priority markers  
    critical: marks tests for critical functionality
    high: marks high priority tests
    medium: marks medium priority tests
    low: marks low priority tests
    
    # Debug markers
    debug: marks tests for debugging specific issues
    regression: marks regression tests for previous bugs
    flaky: marks tests that are known to be flaky

# Enhanced test configuration with debugging features
addopts = 
    --verbose
    --tb=long
    --strict-markers
    --strict-config
    --durations=10
    --durations-min=1.0
    --cov=src
    --cov-report=term-missing
    --cov-report=html:reports/coverage
    --cov-report=xml:reports/coverage.xml
    --cov-fail-under=80
    --no-cov-on-fail
    --junitxml=reports/junit.xml
    --html=reports/report.html
    --self-contained-html
    --capture=no
    --show-capture=all

# Test environment with enhanced debugging
env =
    TESTING=1
    PYTEST_RUNNING=1
    LOG_LEVEL=DEBUG
    DEBUG_MODE=1
    CAPTURE_ERRORS=1
    VELURIA_ENV=test
    MOSS_ENV=test
    CANOPY_ENV=test
    ROOT_ENV=test
    
    # Database settings for testing
    POSTGRES_DB=emotional_wellness_test
    REDIS_DB=15
    
    # Disable external services in tests
    DISABLE_EXTERNAL_APIS=1
    MOCK_EXTERNAL_SERVICES=1
    
    # Enhanced error reporting
    PYTHONFAULTHANDLER=1
    PYTHONDEVMODE=1

# Test paths for discovery
testpaths = 
    tests
    tests/unit
    tests/integration
    tests/symbolic
    tests/test_veluria

# Async test configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Enhanced logging configuration for debugging
log_cli = true
log_cli_level = DEBUG
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Capture all logs during tests
log_capture = true
log_level = DEBUG
log_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)
log_date_format = %Y-%m-%d %H:%M:%S

# Auto-use fixtures
usefixtures = 
    pytest_configure_node

# Minimum version requirements
minversion = 7.0

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Timeout configuration for hanging tests
timeout = 300
timeout_method = thread

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::pytest.PytestUnraisableExceptionWarning

# xvfb configuration for GUI tests (if needed)
xvfb_width = 1280
xvfb_height = 720
xvfb_colordepth = 24

# Test collection configuration
collect_ignore = [
    "setup.py",
    "src/migrations",
    "venv",
    ".venv",
    "node_modules"
]

# Disable cacheprovider for debugging
cache_dir = .pytest_cache
addopts = --cache-clear

# Enhanced output configuration
console_output_style = progress
verbosity_test_cases = 2

# Parallel test execution configuration (when using pytest-xdist)
# addopts = -n auto

# Memory profiling configuration (when using pytest-memray)
# addopts = --memray 